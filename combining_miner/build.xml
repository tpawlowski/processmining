<project name="combining_miner" default="Compile Sources" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
	<property environment="env" />
	<property name="src" location="src" />
	<property name="build" location="bindist" />
	<property name="dist.dir" location="dist" />
	<property name="dist.lib.dir" location="dist/lib" />
	<property name="release" location="latestrelease" />
	<property name="version" value="${major_minor}.${env.BUILD_NUMBER}" />
	<property name="project" value="combining_miner" />
	<property name="main-class" value="org.example.BeamCombinerTest" />

	<property name="author" value="Tomasz Pawlowski" />
	<property name="organisation" value="University of Warsaw" />
	<property name="description" value="combining_miner" />
	<property name="license" value="L-GPL" />

	<property name="ivy.lib.dir" value="ivy" />
	<property name="ivy.cache.dir" value="${user.home}/.ivy2/cache/${env.EXECUTOR_NUMBER}" />

	<!-- Set the os to win32, win64, lin32, lin64, mac, or all -->
	<property name="os" value="all" />

	<path id="classpath">
		<pathelement path="${build}" />
		<pathelement path="${java.class.path}" />
		<fileset dir=".">
			<include name="ivy/**/*.jar" />
		</fileset>
	</path>

	<macrodef name="compile">
		<sequential>
			<!-- Compile the java code from ${src}-@{module} into ${build} -->
			<javac srcdir="${src}" classpathref="classpath" destdir="${build}" nowarn="false" verbose="no" debug="true" debuglevel="lines,vars,source" deprecation="yes" includeantruntime="false">
				<!-- Check for unsafe operations -->
				<compilerarg value="-Xlint:unchecked" />
			</javac>
		</sequential>
	</macrodef>

	<macrodef name="makejar">
		<sequential>
			<!-- Create the distribution directory -->
			<!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file -->
			<jar jarfile="${dist.dir}/${project}-${DSTAMP}.jar">
				<fileset dir="${build}">
					<include name="**" />
					<exclude name="test**" />
				</fileset>
				<fileset dir="${src}">
					<include name="**" />
					<exclude name="test**" />
				</fileset>
				<manifest>
					<attribute name="Built-By" value="${user.name}" />
					<attribute name="Sealed" value="false" />
				</manifest>
			</jar>
			<copy file="${dist.dir}/${project}-${DSTAMP}.jar" tofile="${dist.dir}/${project}.jar" overwrite="true" />
		</sequential>
	</macrodef>

	<target name="clean">
		<echo message="[build] Cleaning binaries and distributions" />
		<delete dir="${build}" />
		<delete dir="${dist.dir}" />
	</target>	
	
	<target name="resolve">
		<ivy:retrieve type="jar,bundle" sync="true" />
	</target>
	
	<target name="compile">
		<echo message="[build] Compiling the sources" />
		<mkdir dir="${build}" />
		<mkdir dir="${dist.dir}" />
		<compile />
		<copy todir="${build}">
		   <fileset dir="." includes="log4j2.properties"/>
		</copy>
	</target>
	
	<!-- Group all dependencies into a big dependency-all.jar -->
	<target name="copy-dependencies" depends="resolve">
		<mkdir dir="${dist.lib.dir}" />
		<jar jarfile="${dist.lib.dir}/dependencies-all.jar" zip64Mode="always">
			<zipgroupfileset dir="${ivy.lib.dir}">
				<include name="**/*.jar" />
			</zipgroupfileset>
		</jar>
	</target>
	
	<!-- jar it, extract above dependency-all.jar and zip it with project files -->
	<target name="jar" depends="compile, copy-dependencies" description="package, output to JAR">
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${dist.lib.dir}" />

		<jar jarfile="${dist.dir}/${project}-with-dependencies.jar" basedir="${build}" zip64Mode="always">
			<manifest>
				<attribute name="Main-Class" value="${main-class}" />
			</manifest>
			<zipfileset src="${dist.lib.dir}/dependencies-all.jar" excludes="META-INF/*.SF" />
		</jar>

	</target>
		
	<target name="makejar">
		<echo message="[build] Creating jar" />
		<tstamp />
		<makejar />
	</target>

	<target name="Compile Sources" depends="resolve,compile,makejar,jar" />
</project>


